#!/usr/bin/env bash

# =============================================================================
# Git Pre-Commit Hook
# =============================================================================
# This hook performs quality checks and security scans before allowing commits
# It can be customized per repository by modifying the checks below

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Get list of staged files
get_staged_files() {
    git diff --cached --name-only --diff-filter=ACM
}

# Get staged files with specific extensions
get_staged_files_by_ext() {
    local ext="$1"
    get_staged_files | grep -E "\.$ext$" || true
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# =============================================================================
# Security Checks
# =============================================================================

check_secrets() {
    log_info "Checking for secrets and sensitive data..."
    
    local failed=0
    local staged_files
    staged_files=$(get_staged_files)
    
    if [[ -z "$staged_files" ]]; then
        log_info "No staged files to check"
        return 0
    fi
    
    # Common secret patterns
    local secret_patterns=(
        'BEGIN (RSA|DSA|EC|OPENSSH) PRIVATE KEY'
        'password\s*=\s*["\'"'"'][^"'"'"']+["\'"'"']'
        'api[_-]?key\s*=\s*["\'"'"'][^"'"'"']+["\'"'"']'
        'secret[_-]?key\s*=\s*["\'"'"'][^"'"'"']+["\'"'"']'
        'access[_-]?token\s*=\s*["\'"'"'][^"'"'"']+["\'"'"']'
        'auth[_-]?token\s*=\s*["\'"'"'][^"'"'"']+["\'"'"']'
        'AWS_ACCESS_KEY_ID'
        'AWS_SECRET_ACCESS_KEY'
        'GITHUB_TOKEN'
        'GITLAB_TOKEN'
        'DOCKER_PASSWORD'
        'MYSQL_PASSWORD'
        'POSTGRES_PASSWORD'
    )
    
    for pattern in "${secret_patterns[@]}"; do
        if git diff --cached | grep -iE "$pattern" >/dev/null; then
            log_error "Potential secret found matching pattern: $pattern"
            failed=1
        fi
    done
    
    # Check for common secret file patterns
    while IFS= read -r file; do
        if [[ "$file" =~ \.(key|pem|p12|pfx)$ ]]; then
            log_error "Potential secret file: $file"
            failed=1
        fi
        
        if [[ "$file" =~ (credentials|secrets|\.env) ]]; then
            log_warn "Potential sensitive file: $file"
        fi
    done <<< "$staged_files"
    
    if [[ $failed -eq 1 ]]; then
        log_error "Secret scan failed! Please review and remove sensitive data."
        return 1
    fi
    
    log_success "Secret scan passed"
    return 0
}

check_file_size() {
    log_info "Checking file sizes..."
    
    local max_size=$((50 * 1024 * 1024)) # 50MB
    local failed=0
    
    while IFS= read -r file; do
        if [[ -f "$file" ]]; then
            local size
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
            if [[ $size -gt $max_size ]]; then
                log_error "File too large: $file ($(( size / 1024 / 1024 ))MB > 50MB)"
                log_error "Consider using Git LFS for large files"
                failed=1
            fi
        fi
    done <<< "$(get_staged_files)"
    
    if [[ $failed -eq 1 ]]; then
        return 1
    fi
    
    log_success "File size check passed"
    return 0
}

# =============================================================================
# Code Quality Checks
# =============================================================================

check_trailing_whitespace() {
    log_info "Checking for trailing whitespace..."
    
    if git diff --cached --check; then
        log_success "No trailing whitespace found"
        return 0
    else
        log_error "Trailing whitespace found. Run 'git diff --cached --check' to see details."
        log_info "Fix with: git diff --cached --name-only | xargs sed -i 's/[[:space:]]*$//' (macOS: sed -i '')"
        return 1
    fi
}

check_python_syntax() {
    local python_files
    python_files=$(get_staged_files_by_ext "py")
    
    if [[ -z "$python_files" ]]; then
        return 0
    fi
    
    log_info "Checking Python syntax..."
    
    local failed=0
    while IFS= read -r file; do
        if [[ -n "$file" ]]; then
            if ! python3 -m py_compile "$file" 2>/dev/null; then
                log_error "Python syntax error in: $file"
                failed=1
            fi
        fi
    done <<< "$python_files"
    
    if [[ $failed -eq 1 ]]; then
        return 1
    fi
    
    log_success "Python syntax check passed"
    return 0
}

check_javascript_syntax() {
    local js_files
    js_files=$(get_staged_files | grep -E '\.(js|jsx|ts|tsx)$' || true)
    
    if [[ -z "$js_files" ]]; then
        return 0
    fi
    
    log_info "Checking JavaScript/TypeScript syntax..."
    
    if command_exists node; then
        local failed=0
        while IFS= read -r file; do
            if [[ -n "$file" ]]; then
                if ! node --check "$file" 2>/dev/null; then
                    log_error "JavaScript syntax error in: $file"
                    failed=1
                fi
            fi
        done <<< "$js_files"
        
        if [[ $failed -eq 1 ]]; then
            return 1
        fi
        
        log_success "JavaScript syntax check passed"
    else
        log_warn "Node.js not found, skipping JavaScript syntax check"
    fi
    
    return 0
}

check_shell_syntax() {
    local shell_files
    shell_files=$(get_staged_files | grep -E '\.(sh|bash|zsh)$' || true)
    
    if [[ -z "$shell_files" ]]; then
        return 0
    fi
    
    log_info "Checking shell script syntax..."
    
    local failed=0
    while IFS= read -r file; do
        if [[ -n "$file" ]]; then
            # Check shebang to determine shell
            local shebang
            shebang=$(head -n1 "$file" 2>/dev/null || echo "")
            
            if [[ "$shebang" =~ bash ]]; then
                if ! bash -n "$file" 2>/dev/null; then
                    log_error "Bash syntax error in: $file"
                    failed=1
                fi
            elif [[ "$shebang" =~ zsh ]]; then
                if command_exists zsh && ! zsh -n "$file" 2>/dev/null; then
                    log_error "Zsh syntax error in: $file"
                    failed=1
                fi
            else
                # Default to bash check
                if ! bash -n "$file" 2>/dev/null; then
                    log_error "Shell syntax error in: $file"
                    failed=1
                fi
            fi
        fi
    done <<< "$shell_files"
    
    if [[ $failed -eq 1 ]]; then
        return 1
    fi
    
    log_success "Shell syntax check passed"
    return 0
}

# =============================================================================
# Linting Checks (if tools are available)
# =============================================================================

run_python_linting() {
    local python_files
    python_files=$(get_staged_files_by_ext "py")
    
    if [[ -z "$python_files" ]]; then
        return 0
    fi
    
    if command_exists flake8; then
        log_info "Running flake8 on Python files..."
        if ! echo "$python_files" | xargs flake8 --max-line-length=88; then
            log_error "Python linting failed"
            return 1
        fi
        log_success "Python linting passed"
    fi
    
    if command_exists black; then
        log_info "Checking Python formatting with black..."
        if ! echo "$python_files" | xargs black --check --diff; then
            log_error "Python formatting check failed. Run 'black .' to fix."
            return 1
        fi
        log_success "Python formatting check passed"
    fi
    
    return 0
}

run_javascript_linting() {
    local js_files
    js_files=$(get_staged_files | grep -E '\.(js|jsx|ts|tsx)$' || true)
    
    if [[ -z "$js_files" ]]; then
        return 0
    fi
    
    if command_exists eslint; then
        log_info "Running ESLint on JavaScript/TypeScript files..."
        if ! echo "$js_files" | xargs eslint; then
            log_error "JavaScript linting failed"
            return 1
        fi
        log_success "JavaScript linting passed"
    fi
    
    if command_exists prettier; then
        log_info "Checking JavaScript/TypeScript formatting with Prettier..."
        if ! echo "$js_files" | xargs prettier --check; then
            log_error "JavaScript formatting check failed. Run 'prettier --write .' to fix."
            return 1
        fi
        log_success "JavaScript formatting check passed"
    fi
    
    return 0
}

# =============================================================================
# Main Hook Execution
# =============================================================================

main() {
    log_info "Running pre-commit checks..."
    
    local exit_code=0
    
    # Security checks (mandatory)
    if ! check_secrets; then
        exit_code=1
    fi
    
    if ! check_file_size; then
        exit_code=1
    fi
    
    # Code quality checks
    if ! check_trailing_whitespace; then
        exit_code=1
    fi
    
    # Syntax checks
    if ! check_python_syntax; then
        exit_code=1
    fi
    
    if ! check_javascript_syntax; then
        exit_code=1
    fi
    
    if ! check_shell_syntax; then
        exit_code=1
    fi
    
    # Linting (optional - warnings only)
    run_python_linting || log_warn "Python linting issues found (not blocking)"
    run_javascript_linting || log_warn "JavaScript linting issues found (not blocking)"
    
    if [[ $exit_code -eq 0 ]]; then
        log_success "All pre-commit checks passed!"
    else
        log_error "Some pre-commit checks failed. Please fix the issues above."
        log_info "You can bypass this hook with: git commit --no-verify"
    fi
    
    exit $exit_code
}

# Allow bypassing the hook in CI environments
if [[ "${CI:-}" == "true" ]] || [[ "${SKIP_PRE_COMMIT:-}" == "true" ]]; then
    log_info "Skipping pre-commit checks (CI environment or SKIP_PRE_COMMIT set)"
    exit 0
fi

main "$@" 